name: Deploy Backend to EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Permite ejecución manual

env:
  AWS_REGION: eu-west-1
  EC2_INSTANCE_TYPE: t3.micro
  EC2_AMI: ami-0a4ca8562c4de78ff # Amazon Linux 2 AMI actualizado para eu-west-1
  EC2_KEY_NAME: ai4devs-key
  EC2_SECURITY_GROUP: ai4devs-sg
  APP_DIR: backend
  DOCKER_COMPOSE_VERSION: "2.24.6"
  SPOT_PRICE: "0.0084" # Precio máximo por hora para t3.micro en eu-west-1

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ env.APP_DIR }}/package-lock.json

      - name: Install Dependencies
        working-directory: ${{ env.APP_DIR }}
        run: npm ci

      - name: Run Tests
        working-directory: ${{ env.APP_DIR }}
        run: npm test

      - name: Build Application
        working-directory: ${{ env.APP_DIR }}
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ${{ env.APP_DIR }}/dist
          retention-days: 1

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ${{ env.APP_DIR }}/dist

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create EC2 Spot Instance
        id: ec2
        run: |
          # Crear la instancia EC2 usando AWS CLI
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ env.EC2_AMI }} \
            --instance-type ${{ env.EC2_INSTANCE_TYPE }} \
            --key-name ${{ env.EC2_KEY_NAME }} \
            --security-group-ids ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --subnet-id ${{ secrets.EC2_SUBNET_ID }} \
            --instance-market-options "MarketType=spot,SpotOptions={MaxPrice=${{ env.SPOT_PRICE }},SpotInstanceType=one-time}" \
            --user-data file://<(cat << 'EOF'
            #!/bin/bash
            # Configurar el script de terminación para limpiar recursos
            cat > /etc/spot-instance-termination-notice-handler.sh << 'EOF'
            #!/bin/bash
            while sleep 5; do
                if [ -f /run/spot-instance-termination-notice ]; then
                    echo "Spot instance termination notice received"
                    # Detener la aplicación
                    pm2 stop all
                    # Detener Docker containers
                    docker-compose down
                    # Limpiar datos temporales
                    rm -rf /tmp/*
                    exit 0
                fi
            done
            EOF
            chmod +x /etc/spot-instance-termination-notice-handler.sh
            nohup /etc/spot-instance-termination-notice-handler.sh &

            # Instalación de dependencias
            yum update -y
            yum install -y docker
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            curl -L "https://github.com/docker/compose/releases/download/v${{ env.DOCKER_COMPOSE_VERSION }}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            yum install -y nodejs npm
            npm install -g pm2

            # Configurar swap para evitar problemas de memoria
            dd if=/dev/zero of=/swapfile bs=128M count=16
            chmod 600 /swapfile
            mkswap /swapfile
            swapon /swapfile
            echo '/swapfile swap swap defaults 0 0' >> /etc/fstab
            EOF
            ) \
            --query 'Instances[0].InstanceId' \
            --output text)
          
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for EC2 Instance
        run: |
          aws ec2 wait instance-running --instance-ids ${{ steps.ec2.outputs.instance_id }}
          aws ec2 wait instance-status-ok --instance-ids ${{ steps.ec2.outputs.instance_id }}

      - name: Get EC2 Instance Public IP
        id: ip
        run: |
          echo "ip=$(aws ec2 describe-instances --instance-ids ${{ steps.ec2.outputs.instance_id }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)" >> $GITHUB_OUTPUT

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.pem
          chmod 600 ~/.ssh/ec2.pem
          ssh-keyscan -H ${{ steps.ip.outputs.ip }} >> ~/.ssh/known_hosts

      - name: Deploy Application
        run: |
          # Crear directorio de la aplicación
          ssh -i ~/.ssh/ec2.pem ec2-user@${{ steps.ip.outputs.ip }} "mkdir -p ~/app"
          
          # Copiar archivos necesarios
          scp -i ~/.ssh/ec2.pem -r ${{ env.APP_DIR }}/* ec2-user@${{ steps.ip.outputs.ip }}:~/app/
          scp -i ~/.ssh/ec2.pem docker-compose.yml ec2-user@${{ steps.ip.outputs.ip }}:~/app/
          
          # Configurar y desplegar la aplicación
          ssh -i ~/.ssh/ec2.pem ec2-user@${{ steps.ip.outputs.ip }} "
            cd ~/app
            echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_USER=${{ secrets.DB_USER }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PORT=5432
            PORT=3000
            NODE_ENV=production' > .env
            
            # Iniciar base de datos
            docker-compose up -d
            
            # Instalar dependencias y configurar Prisma
            npm install
            npm run prisma:generate
            npx prisma migrate deploy
            
            # Iniciar aplicación con PM2
            pm2 start dist/index.js --name ai4devs-backend
            pm2 save
            pm2 startup
          "

      - name: Cleanup SSH Key
        if: always()
        run: rm -f ~/.ssh/ec2.pem

      - name: Output Deployment Info
        run: |
          echo "Application deployed to: http://${{ steps.ip.outputs.ip }}:3000"
          echo "EC2 Instance ID: ${{ steps.ec2.outputs.instance_id }}"
          echo "Instance Type: ${{ env.EC2_INSTANCE_TYPE }} (Spot)"
          echo "Max Price: ${{ env.SPOT_PRICE }} per hour" 